---
name: test nornir

on:
  push:
    branches: [ main ]
  pull_request:

###########################################################################
#  LINTERS – se ejecutan solo en Ubuntu / Python 3.9                     #
###########################################################################
jobs:
  linters:
    name: linters
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.9" ]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - uses: snok/install-poetry@v1
        with:
          version: 1.3.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry virtualenv
        uses: actions/cache@v4
        id: cached-poetry
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install deps
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        run: poetry install

      - name: Run ruff
        run: make ruff
      - name: Run mypy
        run: make mypy
      - name: Build docs (sphinx)
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y pandoc
          make docs

###########################################################################
#  TEST MATRIX – Ubuntu, macOS y Windows-2022                             #
###########################################################################
  pytest:
    name: Testing on Py ${{ matrix.python-version }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 25

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10", "3.11", "3.12" ]
        os: [ ubuntu-latest, macos-latest, windows-2022 ]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - uses: snok/install-poetry@v1
        with:
          version: 1.3.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry virtualenv
        uses: actions/cache@v4
        id: cached-poetry
        with:
          path: .venv
          key: venv-${{ matrix.python-version }}-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install deps
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        run: |
          poetry install
          # plugins que los tests importan
          poetry run pip install nornir-utils nornir-jinja2 nornir-napalm

      # ------------------------------------------------------------------
      # TESTS
      # ------------------------------------------------------------------
      - name: Run pytest
        env:
          PYTHONPATH: ./src
        run: |
          poetry run pytest -q

      - name: Run nbval (notebooks)
        if: runner.os == 'Linux'
        env:
          PYTHONPATH: ./src
        run: make nbval

      # ------------------------------------------------------------------
      # Cobertura → Coveralls   (solo Ubuntu + Py 3.11 para no saturar)
      # ------------------------------------------------------------------
      - name: Report coverage
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        env:
          PYTHONPATH: ./src
        run: |
          poetry run pytest --cov=nornir --cov-report=xml
          poetry run coveralls

